# data import
nodes <- read.csv("C:/Users/Serge/OneDrive - экономический факультет МГУ им. М.В.Ломоносова/МГУ/5 семестр/Сетевые модели/ДЗ/LONDON_GANG_ATTR.csv", header=T)
M <- read.csv("C:/Users/Serge/OneDrive - экономический факультет МГУ им. М.В.Ломоносова/МГУ/5 семестр/Сетевые модели/ДЗ/LONDON_GANG.csv", header=T)[2:55]
M <- as.matrix(M)
# creating graph with edge weights, direction and vertex features
net_M <- graph_from_adjacency_matrix(M, mode = "directed", weighted = TRUE)
nodes$X <- paste("X", nodes$X, sep = "")
net_M <- set_vertex_attr(net_M, "Age", nodes$X, nodes$Age)
net_M <- set_vertex_attr(net_M, "Birthplace", nodes$X, nodes$Birthplace)
net_M <- set_vertex_attr(net_M, "Residence", nodes$X, nodes$Residence)
net_M <- set_vertex_attr(net_M, "Arrests", nodes$X, nodes$Arrests)
net_M <- set_vertex_attr(net_M, "Convictions", nodes$X, nodes$Convictions)
net_M <- set_vertex_attr(net_M, "Prison", nodes$X, nodes$Prison)
net_M <- set_vertex_attr(net_M, "Music", nodes$X, nodes$Music)
net_M <- set_vertex_attr(net_M, "Ranking", nodes$X, nodes$Ranking)
net_M <- set_vertex_attr(net_M, "West_Africa", nodes$X, (nodes$Birthplace == 1) * 1)
net_M <- set_vertex_attr(net_M, "Caribbean", nodes$X, (nodes$Birthplace == 2) * 1)
net_M <- set_vertex_attr(net_M, "East_Africa", nodes$X, (nodes$Birthplace == 4) * 1)
V(net_M)$West_Africa
ergm_model <- asNetwork(net_M)
net_M
V(net_M)$Birthplace
V(net_M)$Residents
V(net_M)$Resident
net_M
V(net_M)$Residence
ergm_model.03 <- ergm(ergm_model ~ edges + nodecov('Arrests') + nodecov('Age') + nodecov('Convictions') + nodecov('Prison') + nodecov('West_Africa') + nodecov('Caribbean') +  nodecov('East_Africa') + nodecov('Residence'))
summary(ergm_model.03)
V(net_M)$Arests
net_M
V(net_M)$Arrests
V(net_M)$Convictions\
V(net_M)$Convictions
ergm_model.01 <- ergm(ergm_model ~ edges + nodecov('Arrests') + nodecov('Age') + nodecov('Convictions') + nodecov('West_Africa') + nodecov('Caribbean') +  nodecov('East_Africa') + nodecov('Residence'))
summary(ergm_model.01)
ergm_model.02 <- ergm(ergm_model ~ triangles + nodecov('Arrests'))
# можно насимулировать графов по нашей модели
ergm_model.01.sim <- simulate(ergm_model.01, nsim=10)
ergm_model.01.sim[[1]] # это граф, можно его любые характеристики взять и сравнить с наблюдаемым графом
ergm_model.01.sim$Vertex
ergm_model.01.sim$Age
?egrm
?ergm
net_M2 =delete.edges(net_M, which(E(net_M)$weight <=1))
ergm_model2 <- asNetwork(net_M2)
ergm_model.015 <- ergm(ergm_model2 ~ edges + nodecov('Arrests') + nodecov('Age') + nodecov('Convictions') + nodecov('Prison') + nodecov('West_Africa') + nodecov('Caribbean') +  nodecov('East_Africa') + nodecov('Residence'))
summary(ergm_model.015)
mcmc.diagnostics(ergm_model.015)
ergm_model.015 <- ergm(ergm_model2 ~ edges + nodecov('Arrests') + nodecov('Age') + nodecov('Convictions') + nodecov('Prison') + nodecov('West_Africa') + nodecov('Caribbean') +  nodecov('East_Africa') + nodecov('Residence'))
summary(ergm_model.015)
mcmc.diagnostics(ergm_model.015)
ergm_model.02 <- ergm(ergm_model ~ triangles)
mcmc.diagnostics(ergm_model.02)
mcmc.diagnostics(ergm_model.02)
ergm_model.02.gof <- gof(ergm_model.02)
ergm_model.02.gof # esp(i) -- сколько у пары вершин общих соседей
ergm_model.02.gof <- gof(ergm_model.015)
ergm_model.02.gof # esp(i) -- сколько у пары вершин общих соседей
# с помощью аргумента GOF можно выбрать сравниваемые характеристики
plot(ergm_model.02.gof) # тоже самое графически по всем сравниваемым характеристикам
ergm_model.01 <- ergm(ergm_model ~ edges + nodecov('Arrests') + nodecov('Age') + nodecov('Convictions') + nodecov('Prison') + nodecov('West_Africa') + nodecov('Caribbean') +  nodecov('East_Africa') + nodecov('Residence'))
summary(ergm_model.01)
ergm_model.01.gof <- gof(ergm_model.01)
ergm_model.01.gof
plot(ergm_model.01.gof)
par(mfrow = c(1, 1))
plot(ergm_model.01.gof)
plot(ergm_model.01.gof, main = 'Модель 1')
plot(ergm_model.01.gof, main = 'Goodness-of-fit для модели №1')
ergm_model.015.gof <- gof(ergm_model.015)
ergm_model.015.gof
plot(ergm_model.015.gof, main = 'Goodness-of-fit для модели №1')
plot(ergm_model.015.gof, main = 'Goodness-of-fit для модели №2')
LS -A
ls -a
ls
cd
library(mvtnorm)
library('forecast')
library(xtable)
library(plotrix)
rm(list = ls())
set.seed(1234)
#setwd('/Users/darkhangelsky/Library/CloudStorage/Dropbox-Personal/Research/aggregate_iv/code/simulation_paper/Nakamura')
source('implementation/synth_weights.r')
W_mat_or <- data_nak[[2]][-1,]
#setwd('/Users/darkhangelsky/Library/CloudStorage/Dropbox-Personal/Research/aggregate_iv/code/simulation_paper/Nakamura')
source('implementation/synth_weights.r')
devtools::install_github("synth-inference/synthdid")
intall.packages('devtools')
install.packages('devtools')
devtools::install_github("synth-inference/synthdid")
library(synthdid)
# Estimate the effect of California Proposition 99 on cigarette consumption
data('california_prop99')
?panel.matrices
california_prop99
tau.hat = synthdid_estimate(setup$Y, setup$N0, setup$T0)
setup = panel.matrices(california_prop99)
tau.hat = synthdid_estimate(setup$Y, setup$N0, setup$T0)
tau.hat
summary.synthdid_estimate(tau.hat)
?summary.synthdid_estimate
?synthdid_plot
synthdid_plot(tau.hat)
devtools::install_github("AntonZudin/Robust-TSLS-package")
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, index_sub, T_0,
state_names, time_column = TRUE)
robust_estimates
print.robust_estimate(robust_estimates)
robust_estimates$index_sub
robust_estimate()
robust_estimates
attributes(robust_estimates)
plot_2(robust_estimates, T_0, 1968)
plot_2(robust_estimates, T_0, 1968)
devtools::install_github("AntonZudin/Robust-TSLS-package")
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 4321)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
dim(Y_mat_or)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, index_sub, T_0,
state_names, time_column = TRUE)
index_sub
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, index_sub, T_0,
state_names, time_column = TRUE)
Y_mat_or
\\
Y_mat_or
Y_mat_or[index_sub,]
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
x <- matrix(1, ncol = 1, nrow = n)
x <- matrix(1, ncol = 1, nrow = 10'')
x <- matrix(1, ncol = 1, nrow = 10)
x == matrix(1, ncil=1, nrow=11)
x == matrix(1, ncol=1, nrow=11)
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
x <- (5 > 2)
if (x){print('1')}
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
robust_estimates
print.robust_estimate(robust_estimates)
plot_1(robust_estimates)
plot_1(robust_estimates)
plot_1(robust_estimates)
plot_3(robust_estimates)
plot_2(robust_estimates, T_0, 1968)
robust_estimates
robust_estimates$result
robust_estimates$result[1]
dim(robust_estimates$result[1])
dim(robust_estimates$result[[1]])
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)
sum(index_sub)
data_nak[[4]]
data_nak[[4]][-1]
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
sum(index_sub)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
robust_estimates
print(robust_estimates)
1
print(robust_estimates)
print.robust_estimate(robust_estimates)
Y_mat_or
class(Y_mat_or)
class(data_nak[[1]])
data_nak[[1]]
type(Y_mar)
type(Y_mat)
typeof(Y_mat)
typeof(Y_mat_or)
typeof(data_nak[[1]])
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
1
plot_1(robust_estimates)
source("~/.active-rstudio-document", echo=TRUE)
plot_1(robust_estimates)
plot_1(robust_estimates)
plot_1(robust_estimates)
plot_3(robust_estimates)
plot_2(robust_estimates, T_0, 1968)
devtools::install_github("AntonZudin/Robust-TSLS-package")
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
plot_2(robust_estimates, T_0, 1968)
plot_3(robust_estimates)
plot_1(robust_estimates)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
plot_1(robust_estimates)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
plot_1(robust_estimates)
plot_3(robust_estimates)
setwd("C:/Users/Serge/OneDrive - экономический факультет МГУ им. М.В.Ломоносова/Митя/Robust-TSLS-package")
library(devtools)
document()
document()
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
?plot_1
?plot_2
