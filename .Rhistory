Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
dim(Y_mat_or)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z, share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3, B = 1000,
S = 300, test = FALSE, K = 300, deg = 4, height = 9*0.75, width = 16*0.75, folder = NULL, seed = 1234)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, index_sub, T_0,
state_names, time_column = TRUE)
index_sub
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, index_sub, T_0,
state_names, time_column = TRUE)
Y_mat_or
\\
Y_mat_or
Y_mat_or[index_sub,]
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
x <- matrix(1, ncol = 1, nrow = n)
x <- matrix(1, ncol = 1, nrow = 10'')
x <- matrix(1, ncol = 1, nrow = 10)
x == matrix(1, ncil=1, nrow=11)
x == matrix(1, ncol=1, nrow=11)
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
x <- (5 > 2)
if (x){print('1')}
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
robust_estimates
print.robust_estimate(robust_estimates)
plot_1(robust_estimates)
plot_1(robust_estimates)
plot_1(robust_estimates)
plot_3(robust_estimates)
plot_2(robust_estimates, T_0, 1968)
robust_estimates
robust_estimates$result
robust_estimates$result[1]
dim(robust_estimates$result[1])
dim(robust_estimates$result[[1]])
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)
sum(index_sub)
data_nak[[4]]
data_nak[[4]][-1]
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
sum(index_sub)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
robust_estimates
print(robust_estimates)
1
print(robust_estimates)
print.robust_estimate(robust_estimates)
Y_mat_or
class(Y_mat_or)
class(data_nak[[1]])
data_nak[[1]]
type(Y_mar)
type(Y_mat)
typeof(Y_mat)
typeof(Y_mat_or)
typeof(data_nak[[1]])
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
1
plot_1(robust_estimates)
source("~/.active-rstudio-document", echo=TRUE)
plot_1(robust_estimates)
plot_1(robust_estimates)
plot_1(robust_estimates)
plot_3(robust_estimates)
plot_2(robust_estimates, T_0, 1968)
##############################
############ ERGM ############
##############################
library(statnet)
library(ergm)
set.seed(0)
library(intergraph)
install.packages('Bergm')
install.packages("Bergm")
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
simulation(Y_mat_or, W_mat_or, Z,
share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3,
B = 1000, S = 300,
test = True,
K = 300, deg = 4,
height = 9 * 0.75, width = 16 * 0.75,
plot_folder = NULL, save_sim = TRUE, sim_folder = NULL,
sim_name = 'simulation_result',
seed = 1234)
simulation(Y_mat_or, W_mat_or, Z,
share_t = 1/3, share_rank = 1/3,
rho_agg = 0.5, rho_theta_w = 0.2, rho_theta_y = 0.3,
B = 1000, S = 300,
test = TRUE,
K = 300, deg = 4,
height = 9 * 0.75, width = 16 * 0.75,
plot_folder = NULL, save_sim = TRUE, sim_folder = NULL,
sim_name = 'simulation_result',
seed = 1234)
data_nak
data_nak[[1]]
data_nak[[1]][-1,]
data_nak[[1]][1,]
sim_from_file(file_folder = NULL, file_name = 'simulation_result',
plot_folder = NULL, K = 300, deg = 4,
height = 9 * 0.75, width = 16 * 0.75)
library(readr)
Семинар_2_dataset <- read_csv("C:/Users/Serge/OneDrive - экономический факультет МГУ им. М.В.Ломоносова/МГУ/6 семестр/Эмперические отрасли/Семинар 2_dataset.csv")
View(Семинар_2_dataset)
library(tidyverse)
library(readr)
data <- read_csv("C:/Users/Serge/OneDrive - экономический факультет МГУ им. М.В.Ломоносова/МГУ/6 семестр/Эмперические отрасли/Семинар 2_dataset.csv")
data
data['market size'
]
data['market size']
data['market size',]
data[,'market size']
data$'market_size' <- data$city_population
data$'market_share' <- data$'servings_sold' / data$'market_size'
data$'market_share'
summary(data$'market_share')
data$'market_size' <- data$city_population * 91
data$'market_share' <- data$'servings_sold' / data$'market_size'
summary(data$'market_share')
data <- data %>%
group_by(market) %>%
mutate(outside_share = 1 - sum(market_share))
data <- data %>%
group_by(market_ids) %>%
mutate(outside_share = 1 - sum(market_share))
summary(data$market_share, data$outside_share)
summary(data$market_share)
summary(data$outside_share)
summary(data, c('market_share', 'outside_share'))
summary(data[ ,c('market_share', 'outside_share')])
data$logit_delta <- log(data$market_share / data$outside_share)
m1 <- lm(logit_delta ~ price_per_serving + mushy + sugar, data = data)
summary(m1)
model_1 <- lm(logit_delta ~ price_per_serving + mushy + sugar, data = data)
summary(model_1)
model_2 <- lm(logit_delta ~ price_per_serving + mushy + sugar +
as.factor(market_ids) + as.factor(product_ids),
data = data)
summary(model_2)
library(ivreg)
library(stargazer)
install.packages('ivreg')
library(ivreg)
library(stargazer)
###
model_3 <- ivreg(logit_delta ~ price_per_serving + mushy + sugar |
price_instrument + mushy + sugar, data=data)
summary(model_3)
stargazer(model_1, model_2, model_3, type='text')
data$hausman <- 0
for (i in 1:nrow(data)){
subdf <- data %>%
filter(city ! data$city[i]) %>%
for (i in 1:nrow(data)){
subdf <- data %>%
filter(city != data$city[i]) %>%
filter(quarter == data$quarter[i]) %>%
filter(product_ids == data$product_ids)
data$hausman[i] <- mean(subdf$price_per_serving)
}
for (i in 1:nrow(data)){
subdf <- data %>%
filter(city != data$city[i]) %>%
filter(quarter == data$quarter[i]) %>%
filter(product_ids == data$product_ids)
data$hausman[i] <- mean(subdf$price_per_serving)
}
View(data)
for (i in 1:nrow(data)){
subdf <- data %>%
filter(city != data$city[i]) %>%
filter(product_ids == data$product_ids)
data$hausman[i] <- mean(subdf$price_per_serving)
}
for (i in 1:nrow(data)){
subdf <- data %>%
filter(city != data$city[i]) %>%
filter(product_ids == data$product_ids)
data$hausman[i] <- mean(subdf$price_per_serving)
}
setwd("C:/Users/Serge/OneDrive - экономический факультет МГУ им. М.В.Ломоносова/Митя/Robust-TSLS-package")
library(RobustTSLS)
data('nak_out_data')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
pi_unit <- W_mat_or%*%(Z-mean(Z)) / var_biased(Z)/T #calculate D_i
index_sub <- pi_unit >= quantile(pi_unit, 0.04) & pi_unit <= quantile(pi_unit, 1)#drop inappropriate states
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, index_sub, T_0,
state_names, time_column = TRUE)
pi_delta_scatterplot(robust_estimates)
agg_ts_plot(robust_estimates, T_0, 1968)
weights_scatterplot(robust_estimates)
robust_estimates <- robust_estimate(Y_mat_or, W_mat_or, Z, NULL, NULL, T_0,
state_names, time_column = TRUE)
robust_estimates <- robust_estimate(Y_mat_or = Y_mat_or, W_mat_or = W_mat_or, Z = Z,
unit_covariates = NULL, time_covariates = NULL, T_0 = T_0,
unit_names = state_names, time_column = TRUE)
robust_estimates_full_sample <- robust_estimate(Y_mat_or = Y_mat_or, W_mat_or = W_mat_or, Z = Z,
unit_covariates = NULL, time_covariates = NULL, T_0 = T_0,
unit_names = state_names, time_column = TRUE)
pi_delta_scatterplot(robust_estimates_full_sample)
agg_ts_plot(robust_estimates_full_sample, T_0, 1968)
weights_scatterplot(robust_estimates_full_sample)
robust_estimates_full_sample <- robust_estimate(Y_mat_or = Y_mat_or, W_mat_or = W_mat_or, Z = Z,
unit_covariates = NULL, time_covariates = NULL, T_0 = T_0,
unit_names = state_names, time_column = TRUE)
pi_delta_scatterplot(robust_estimates_full_sample)
agg_ts_plot(robust_estimates_full_sample, T_0, 1968)
weights_scatterplot(robust_estimates_full_sample)
robust_estimates_full_sample$state_names
#weights_scatterplot(robust_estimates_full_sample)
length(robust_estimates_full_sample$state_names)
#weights_scatterplot(robust_estimates_full_sample)
library(RobustTSLS)
data('nak_out_data')
Y_mat_or <- data_nak[[1]][-1,]
W_mat_or <- data_nak[[2]][-1,]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]][-1]
T <- dim(W_mat_or)[2]
T_0 <- 10
length(robust_estimates_full_sample$state_names)
state_names
#weights_scatterplot(robust_estimates_full_sample)
length(robust_estimates_full_sample$state_names)
length(state_names)
#weights_scatterplot(robust_estimates_full_sample)
length(robust_estimates_full_sample$state_names)
length(Y_mat_or)
#weights_scatterplot(robust_estimates_full_sample)
length(robust_estimates_full_sample$state_names)
nrow(Y_mat_or)
#weights_scatterplot(robust_estimates_full_sample)
length(robust_estimates_full_sample$state_names)
ncol(Y_mat_or)
#weights_scatterplot(robust_estimates_full_sample)
length(robust_estimates_full_sample$state_names)
ncol(Y_mat_or)
#weights_scatterplot(robust_estimates_full_sample)
index_sub
state_names
Y_mat_or[, 1]
data_nak
state_names[index_sub]
state_names[!index_sub]
state_names[index_sub]
state_names
Y_mat_or <- data_nak[[1]]
W_mat_or <- data_nak[[2]]
Z <- data_nak[[3]]
start_year <- 1968
state_names <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
robust_estimates_full_sample <- robust_estimate(Y_mat_or = Y_mat_or, W_mat_or = W_mat_or, Z = Z,
unit_covariates = NULL, time_covariates = NULL, T_0 = T_0,
unit_names = state_names, time_column = TRUE)
pi_delta_scatterplot(robust_estimates_full_sample)
agg_ts_plot(robust_estimates_full_sample, T_0, 1968)
#length(robust_estimates_full_sample$state_names)
#ncol(Y_mat_or)
weights_scatterplot(robust_estimates_full_sample)
length(robust_estimates_full_sample$state_names)
#ncol(Y_mat_or)
weights_scatterplot(robust_estimates_full_sample)
weights_scatterplot(robust_estimates_full_sample)
robust_estimates_full_sample$index_sub
nrow(Y_mat_or)
TRUE * nrow(Y_mat_or)
TRUE * nrow(Y_mat_or)
seq(TRUE, length.out = nrow(Y_mat_or))
TRUE * nrow(Y_mat_or)
seq(from = TRUE, by = 0, length.out = nrow(Y_mat_or))
TRUE * nrow(Y_mat_or)
TRUE * seq(from = TRUE, by = 0, length.out = nrow(Y_mat_or))
?rep
TRUE * nrow(Y_mat_or)
TRUE * seq(from = TRUE, by = 0, length.out = nrow(Y_mat_or))
rep(TRUE, length.out = nrow(Y_mat_or) )
length(rep(TRUE, length.out = nrow(Y_mat_or) ))
Y_mat_or_full <- data_nak[[1]]
W_mat_or_full <- data_nak[[2]]
Z_full <- data_nak[[3]]
start_year <- 1968
state_names_full <- data_nak[[4]]
T <- dim(W_mat_or)[2]
T_0 <- 10
robust_estimates_full_sample <- robust_estimate(Y_mat_or = Y_mat_or_full, W_mat_or = W_mat_or_full, Z = Z_full,
unit_covariates = NULL, time_covariates = NULL, T_0 = T_0,
unit_names = state_names_full, time_column = TRUE)
remove.packages('RobustTSLS')
devtools::install_github("AntonZudin/Robust-TSLS-package")
